import pandas as pd
import os 
from sys import argv
import json
import glob
import time
import pickle

from datetime import datetime

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.externals import joblib
from sklearn import svm
from sklearn import tree
from sklearn.metrics import f1_score
import random
import numpy as np

print('---------- Welcome to Malware Detection Tool----------')
print('Syntax: python MalwareDetection.py pathToTestingDataFolder')
if len(argv) != 2:
	print('Wrong Syntax: python MalwareDetection.py pathToTestingDataFolder')
	exit(0)
path = argv[1]
success = True
start = time.time()
print('Starting Program at '+ str(datetime.fromtimestamp(start)))
if path[-1] == '/':
	path = path[:-1]
csvpath = os.getcwd() 
cols=[]
with open('Features.dat', 'rb') as f:
	cols=pickle.load(f)

pipe=None
with open("Model.joblib", "rb") as fp:  
	pipe=joblib.load(fp)

DynamicBenignJsonPaths = glob.glob(path +  '/*/*/*.json')
DynamicMalwareJsonPaths = glob.glob(path +  '/*/*/*/*.json')
StaticBenignPaths = glob.glob(path + '/*/*/*/String.txt')
StaticMalwarePaths = glob.glob(path + '/*/*/*/*/String.txt')
if len(DynamicBenignJsonPaths) * len(DynamicMalwareJsonPaths) * len(StaticMalwarePaths) * len(StaticBenignPaths) == 0:
		print('Wrong Path. Restart the program with correct path.')
		exit(0)
data={}
def hexa(stringobj):
	if(stringobj[:2] != '0x'):
		return 1
	return int(stringobj[2:], 16)
def readStringAndStructure(a,y):
	i = 1
	for location in a:
		foldername = ''
		if '/' in location:
			bc=location.split('/')
			foldername=bc[-2]
		else:
			bc=location.split('\\')
			foldername=bc[-2]
		print('Scanning Static File' + str(i) + ' : ' + foldername)
		i = i + 1
		if not foldername in data:
			data[foldername]={}
			for col in cols:
				data[foldername][col]=0  
		fs=open(location,'r')
		for line in fs.readlines():
			line = line.replace('\n', '')
			if line in data[foldername]:
				data[foldername][line]=1
		fs.close()
		location=location[:-10]
		os.chdir(location)
		header_name = ''
		section_name = ''
		file= open('Structure_Info.txt', 'r', encoding='utf-8', errors='ignore')
		for line in file.readlines():
			line = line.replace("\n", "")
			if line[:6] == '[IMAGE':
				header_name = line
				continue
			if line[:2] == '0x':
				parts = line.split()
				if ((len(parts) == 4)):
					if (parts[2] == 'Name' or (parts[2] == 'TimeDateStamp')):
						section_name = parts[2]
						continue
					if header_name == '[IMAGE_SECTION_HEADER]':
						if (section_name + '_' + parts[2]) in data[foldername]:
							data[foldername][section_name + '_' + parts[2]] = hexa(parts[3])
					else:
						if (header_name + '_' + parts[2]) in data[foldername]:
							data[foldername][header_name + '_' + parts[2]] = hexa(parts[3])
			elif ((line[:2] == 'Dl') or (line[:2] == 'Fl')) :
				line = line.strip(',')
				parts = line.split()
				parts = parts[1:]
				for part in parts:
					if part in data[foldername]:
						data[foldername][part] = 1
		file.close()          
		data[foldername]['y']= y  
def dynamicjson(a,y,gram):
	q = 1
	for fname in a:
		if fname.endswith(".json"):
			with open(fname,encoding='utf-8') as p:
				js=json.load(p)
			if '/' in fname:
				rty = fname.split('/')
				fname = rty[-1]
			else:
				rty = fname.split('\\')
				fname = rty[-1]
			fname=fname[:-5]
			print('Scanning Dynamic File' + str(q) + ' : ' + fname)
			q= q + 1
			if not fname in data:
				data[fname]={}
				for col in cols:
					data[fname][col]=0  
			data[fname]['y']=y  
			behav=js['behavior']['processes']
			for obj in behav:
				calls=obj['calls']
				for i in range (0,len(calls)-gram+1):
					col=''
					for j in range(i,i+gram):
						col=col+calls[j]['api']
					if col in data[fname]:
						data[fname][col]=1  


print('Initiating Data Collection ')
readStringAndStructure(StaticBenignPaths,0)
readStringAndStructure(StaticMalwarePaths,1)
dynamicjson(DynamicBenignJsonPaths,0,4)
dynamicjson(DynamicMalwareJsonPaths,1,4)

print('Data Collection Complete at ' +  str(datetime.fromtimestamp(time.time())))

print('Initiating Machine Learning Model')

df=pd.DataFrame.from_dict(data,'index')
df = df.reindex(columns=cols)
X=df[[i for i in list(df.columns) if i != 'y']].values
y=df[['y']].values

y_pred = pipe.predict(X)

print('Model Prediction Complete at ' + str(datetime.fromtimestamp(time.time())))
prediction=pd.DataFrame(data=y_pred,index=df.index,columns=['Class'])
prediction['Class']=prediction['Class'].replace({1:'Malware',0:'Benign'})
os.chdir(csvpath)
prediction.to_csv('Prediction.csv')
print('Saving CSV file out')
if success == True:
	end  = time.time()
	print('Program Executed Successfully at '+ str(datetime.fromtimestamp(end)))
	print('Time Taken: ' + str(end - start) + ' s.')
	print('-----------------------------------')
else:
	print('Unknown Error. Restart the file.')